# -*- coding: utf-8 -*-
"""Hyperopt-Test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12Ln9D8fKJ1fKJJBTnmQFuHjrJ_eO_ac0
"""

from pandas import read_csv
import sklearn
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_absolute_error
from hpsklearn import HyperoptEstimator
from hpsklearn import any_regressor
from hpsklearn import any_preprocessing
from hyperopt import tpe

print('scikit-learn version {}.'.format(sklearn.__version__))

# load dataset
dataframe = read_csv("ThesisProcessedData.csv", index_col=0, header=0)

dataframe = dataframe.drop(columns = ["gameId","isDefensivePI","playResult","offensePlayResult"])

dataframe

dataframe.dtypes

numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']

numeric_df = dataframe.select_dtypes(include=numerics)

numeric_df

numeric_df = numeric_df.dropna()

data = numeric_df.values
data

# split into input and output elements
X, y = data[:, :-1], data[:, -1]

y

# minimally prepare dataset
X = X.astype('float64')

# split into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=1)

# define search space

model = HyperoptEstimator(
    regressor=any_regressor('reg')
    , preprocessing=any_preprocessing('pre')
    , loss_fn=mean_absolute_error
    , algo=tpe.suggest
    , max_evals=50
    , trial_timeout=30
)

# perform the search
model.fit(X_train, y_train)

# summarize performance
acc = model.score(X_test, y_test)
print("Accuracy: %.3f" % acc)

# summarize the best model
print(model.best_model())

# summarize performance
mae = model.score(X_test, y_test)
print("MAE: %.3f" % mae)

y_test

y_pred = model.predict(X_test)
y_pred

residuals = y_test - y_pred

import matplotlib.pyplot as plt

plt.scatter(y_pred, residuals)
plt.show()

plt.scatter(y_test, y_pred)
plt.show()